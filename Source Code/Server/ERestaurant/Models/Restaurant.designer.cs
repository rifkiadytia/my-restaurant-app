#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ERestaurant.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="RestaurantInsight")]
	public partial class RestaurantDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFoodCategoryMaster(FoodCategoryMaster instance);
    partial void UpdateFoodCategoryMaster(FoodCategoryMaster instance);
    partial void DeleteFoodCategoryMaster(FoodCategoryMaster instance);
    partial void InsertFoodMaster(FoodMaster instance);
    partial void UpdateFoodMaster(FoodMaster instance);
    partial void DeleteFoodMaster(FoodMaster instance);
    partial void InsertOrderMaster(OrderMaster instance);
    partial void UpdateOrderMaster(OrderMaster instance);
    partial void DeleteOrderMaster(OrderMaster instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertPositionMaster(PositionMaster instance);
    partial void UpdatePositionMaster(PositionMaster instance);
    partial void DeletePositionMaster(PositionMaster instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSessionMaster(SessionMaster instance);
    partial void UpdateSessionMaster(SessionMaster instance);
    partial void DeleteSessionMaster(SessionMaster instance);
    partial void InsertTableMaster(TableMaster instance);
    partial void UpdateTableMaster(TableMaster instance);
    partial void DeleteTableMaster(TableMaster instance);
    partial void InsertUserInfo(UserInfo instance);
    partial void UpdateUserInfo(UserInfo instance);
    partial void DeleteUserInfo(UserInfo instance);
    #endregion
		
		public RestaurantDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["RestaurantInsightConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RestaurantDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RestaurantDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RestaurantDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RestaurantDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<FoodCategoryMaster> FoodCategoryMasters
		{
			get
			{
				return this.GetTable<FoodCategoryMaster>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<FoodMaster> FoodMasters
		{
			get
			{
				return this.GetTable<FoodMaster>();
			}
		}
		
		public System.Data.Linq.Table<OrderDetail> OrderDetails
		{
			get
			{
				return this.GetTable<OrderDetail>();
			}
		}
		
		public System.Data.Linq.Table<OrderMaster> OrderMasters
		{
			get
			{
				return this.GetTable<OrderMaster>();
			}
		}
		
		public System.Data.Linq.Table<OrgChart> OrgCharts
		{
			get
			{
				return this.GetTable<OrgChart>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<PermissionRole> PermissionRoles
		{
			get
			{
				return this.GetTable<PermissionRole>();
			}
		}
		
		public System.Data.Linq.Table<PositionMaster> PositionMasters
		{
			get
			{
				return this.GetTable<PositionMaster>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<SessionMaster> SessionMasters
		{
			get
			{
				return this.GetTable<SessionMaster>();
			}
		}
		
		public System.Data.Linq.Table<SessionStructure> SessionStructures
		{
			get
			{
				return this.GetTable<SessionStructure>();
			}
		}
		
		public System.Data.Linq.Table<TableMaster> TableMasters
		{
			get
			{
				return this.GetTable<TableMaster>();
			}
		}
		
		public System.Data.Linq.Table<UserInfo> UserInfos
		{
			get
			{
				return this.GetTable<UserInfo>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FoodCategoryMaster")]
	public partial class FoodCategoryMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _FoodCatID;
		
		private string _FoodCatName;
		
		private EntitySet<FoodMaster> _FoodMasters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFoodCatIDChanging(long value);
    partial void OnFoodCatIDChanged();
    partial void OnFoodCatNameChanging(string value);
    partial void OnFoodCatNameChanged();
    #endregion
		
		public FoodCategoryMaster()
		{
			this._FoodMasters = new EntitySet<FoodMaster>(new Action<FoodMaster>(this.attach_FoodMasters), new Action<FoodMaster>(this.detach_FoodMasters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodCatID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long FoodCatID
		{
			get
			{
				return this._FoodCatID;
			}
			set
			{
				if ((this._FoodCatID != value))
				{
					this.OnFoodCatIDChanging(value);
					this.SendPropertyChanging();
					this._FoodCatID = value;
					this.SendPropertyChanged("FoodCatID");
					this.OnFoodCatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodCatName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FoodCatName
		{
			get
			{
				return this._FoodCatName;
			}
			set
			{
				if ((this._FoodCatName != value))
				{
					this.OnFoodCatNameChanging(value);
					this.SendPropertyChanging();
					this._FoodCatName = value;
					this.SendPropertyChanged("FoodCatName");
					this.OnFoodCatNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FoodCategoryMaster_FoodMaster", Storage="_FoodMasters", ThisKey="FoodCatID", OtherKey="FoodCatID")]
		public EntitySet<FoodMaster> FoodMasters
		{
			get
			{
				return this._FoodMasters;
			}
			set
			{
				this._FoodMasters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FoodMasters(FoodMaster entity)
		{
			this.SendPropertyChanging();
			entity.FoodCategoryMaster = this;
		}
		
		private void detach_FoodMasters(FoodMaster entity)
		{
			this.SendPropertyChanging();
			entity.FoodCategoryMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRole")]
	public partial class UserRole
	{
		
		private long _UserID;
		
		private long _RoleID;
		
		public UserRole()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="BigInt NOT NULL")]
		public long RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FoodMaster")]
	public partial class FoodMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _FoodID;
		
		private string _FoodName;
		
		private string _FoodDescription;
		
		private int _Price;
		
		private string _Image;
		
		private long _FoodCatID;
		
		private int _FinishingTime;
		
		private EntityRef<FoodCategoryMaster> _FoodCategoryMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFoodIDChanging(long value);
    partial void OnFoodIDChanged();
    partial void OnFoodNameChanging(string value);
    partial void OnFoodNameChanged();
    partial void OnFoodDescriptionChanging(string value);
    partial void OnFoodDescriptionChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnFoodCatIDChanging(long value);
    partial void OnFoodCatIDChanged();
    partial void OnFinishingTimeChanging(int value);
    partial void OnFinishingTimeChanged();
    #endregion
		
		public FoodMaster()
		{
			this._FoodCategoryMaster = default(EntityRef<FoodCategoryMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long FoodID
		{
			get
			{
				return this._FoodID;
			}
			set
			{
				if ((this._FoodID != value))
				{
					this.OnFoodIDChanging(value);
					this.SendPropertyChanging();
					this._FoodID = value;
					this.SendPropertyChanged("FoodID");
					this.OnFoodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FoodName
		{
			get
			{
				return this._FoodName;
			}
			set
			{
				if ((this._FoodName != value))
				{
					this.OnFoodNameChanging(value);
					this.SendPropertyChanging();
					this._FoodName = value;
					this.SendPropertyChanged("FoodName");
					this.OnFoodNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodDescription", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string FoodDescription
		{
			get
			{
				return this._FoodDescription;
			}
			set
			{
				if ((this._FoodDescription != value))
				{
					this.OnFoodDescriptionChanging(value);
					this.SendPropertyChanging();
					this._FoodDescription = value;
					this.SendPropertyChanged("FoodDescription");
					this.OnFoodDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodCatID", DbType="BigInt NOT NULL")]
		public long FoodCatID
		{
			get
			{
				return this._FoodCatID;
			}
			set
			{
				if ((this._FoodCatID != value))
				{
					if (this._FoodCategoryMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFoodCatIDChanging(value);
					this.SendPropertyChanging();
					this._FoodCatID = value;
					this.SendPropertyChanged("FoodCatID");
					this.OnFoodCatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishingTime", DbType="Int NOT NULL")]
		public int FinishingTime
		{
			get
			{
				return this._FinishingTime;
			}
			set
			{
				if ((this._FinishingTime != value))
				{
					this.OnFinishingTimeChanging(value);
					this.SendPropertyChanging();
					this._FinishingTime = value;
					this.SendPropertyChanged("FinishingTime");
					this.OnFinishingTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FoodCategoryMaster_FoodMaster", Storage="_FoodCategoryMaster", ThisKey="FoodCatID", OtherKey="FoodCatID", IsForeignKey=true)]
		public FoodCategoryMaster FoodCategoryMaster
		{
			get
			{
				return this._FoodCategoryMaster.Entity;
			}
			set
			{
				FoodCategoryMaster previousValue = this._FoodCategoryMaster.Entity;
				if (((previousValue != value) 
							|| (this._FoodCategoryMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FoodCategoryMaster.Entity = null;
						previousValue.FoodMasters.Remove(this);
					}
					this._FoodCategoryMaster.Entity = value;
					if ((value != null))
					{
						value.FoodMasters.Add(this);
						this._FoodCatID = value.FoodCatID;
					}
					else
					{
						this._FoodCatID = default(long);
					}
					this.SendPropertyChanged("FoodCategoryMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderDetails")]
	public partial class OrderDetail
	{
		
		private string _OrderID;
		
		private long _FoodID;
		
		public OrderDetail()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this._OrderID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodID", DbType="BigInt NOT NULL")]
		public long FoodID
		{
			get
			{
				return this._FoodID;
			}
			set
			{
				if ((this._FoodID != value))
				{
					this._FoodID = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderMaster")]
	public partial class OrderMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _OrderID;
		
		private string _Status;
		
		private long _UserID;
		
		private System.DateTime _OrderTime;
		
		private long _TableID;
		
		private EntityRef<TableMaster> _TableMaster;
		
		private EntityRef<UserInfo> _UserInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(string value);
    partial void OnOrderIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnOrderTimeChanging(System.DateTime value);
    partial void OnOrderTimeChanged();
    partial void OnTableIDChanging(long value);
    partial void OnTableIDChanged();
    #endregion
		
		public OrderMaster()
		{
			this._TableMaster = default(EntityRef<TableMaster>);
			this._UserInfo = default(EntityRef<UserInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(1) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderTime", DbType="DateTime NOT NULL")]
		public System.DateTime OrderTime
		{
			get
			{
				return this._OrderTime;
			}
			set
			{
				if ((this._OrderTime != value))
				{
					this.OnOrderTimeChanging(value);
					this.SendPropertyChanging();
					this._OrderTime = value;
					this.SendPropertyChanged("OrderTime");
					this.OnOrderTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableID", DbType="BigInt NOT NULL")]
		public long TableID
		{
			get
			{
				return this._TableID;
			}
			set
			{
				if ((this._TableID != value))
				{
					if (this._TableMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTableIDChanging(value);
					this.SendPropertyChanging();
					this._TableID = value;
					this.SendPropertyChanged("TableID");
					this.OnTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableMaster_OrderMaster", Storage="_TableMaster", ThisKey="TableID", OtherKey="TableID", IsForeignKey=true)]
		public TableMaster TableMaster
		{
			get
			{
				return this._TableMaster.Entity;
			}
			set
			{
				TableMaster previousValue = this._TableMaster.Entity;
				if (((previousValue != value) 
							|| (this._TableMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TableMaster.Entity = null;
						previousValue.OrderMasters.Remove(this);
					}
					this._TableMaster.Entity = value;
					if ((value != null))
					{
						value.OrderMasters.Add(this);
						this._TableID = value.TableID;
					}
					else
					{
						this._TableID = default(long);
					}
					this.SendPropertyChanged("TableMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserInfo_OrderMaster", Storage="_UserInfo", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public UserInfo UserInfo
		{
			get
			{
				return this._UserInfo.Entity;
			}
			set
			{
				UserInfo previousValue = this._UserInfo.Entity;
				if (((previousValue != value) 
							|| (this._UserInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserInfo.Entity = null;
						previousValue.OrderMasters.Remove(this);
					}
					this._UserInfo.Entity = value;
					if ((value != null))
					{
						value.OrderMasters.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("UserInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrgChart")]
	public partial class OrgChart
	{
		
		private long _UserID;
		
		private long _ParentID;
		
		private System.Nullable<long> _ReportingTo;
		
		public OrgChart()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="BigInt NOT NULL")]
		public long ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this._ParentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportingTo", DbType="BigInt")]
		public System.Nullable<long> ReportingTo
		{
			get
			{
				return this._ReportingTo;
			}
			set
			{
				if ((this._ReportingTo != value))
				{
					this._ReportingTo = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permission")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _PermissionID;
		
		private string _PermissionName;
		
		private string _PermissionDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermissionIDChanging(long value);
    partial void OnPermissionIDChanged();
    partial void OnPermissionNameChanging(string value);
    partial void OnPermissionNameChanged();
    partial void OnPermissionDescriptionChanging(string value);
    partial void OnPermissionDescriptionChanged();
    #endregion
		
		public Permission()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PermissionName
		{
			get
			{
				return this._PermissionName;
			}
			set
			{
				if ((this._PermissionName != value))
				{
					this.OnPermissionNameChanging(value);
					this.SendPropertyChanging();
					this._PermissionName = value;
					this.SendPropertyChanged("PermissionName");
					this.OnPermissionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionDescription", DbType="NVarChar(100)")]
		public string PermissionDescription
		{
			get
			{
				return this._PermissionDescription;
			}
			set
			{
				if ((this._PermissionDescription != value))
				{
					this.OnPermissionDescriptionChanging(value);
					this.SendPropertyChanging();
					this._PermissionDescription = value;
					this.SendPropertyChanged("PermissionDescription");
					this.OnPermissionDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermissionRole")]
	public partial class PermissionRole
	{
		
		private long _PermissionID;
		
		private long _RoleID;
		
		public PermissionRole()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="BigInt NOT NULL")]
		public long PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					this._PermissionID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="BigInt NOT NULL")]
		public long RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PositionMaster")]
	public partial class PositionMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _PositionID;
		
		private string _PositionName;
		
		private int _PositionLevel;
		
		private EntitySet<UserInfo> _UserInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPositionIDChanging(long value);
    partial void OnPositionIDChanged();
    partial void OnPositionNameChanging(string value);
    partial void OnPositionNameChanged();
    partial void OnPositionLevelChanging(int value);
    partial void OnPositionLevelChanged();
    #endregion
		
		public PositionMaster()
		{
			this._UserInfos = new EntitySet<UserInfo>(new Action<UserInfo>(this.attach_UserInfos), new Action<UserInfo>(this.detach_UserInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long PositionID
		{
			get
			{
				return this._PositionID;
			}
			set
			{
				if ((this._PositionID != value))
				{
					this.OnPositionIDChanging(value);
					this.SendPropertyChanging();
					this._PositionID = value;
					this.SendPropertyChanged("PositionID");
					this.OnPositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PositionName
		{
			get
			{
				return this._PositionName;
			}
			set
			{
				if ((this._PositionName != value))
				{
					this.OnPositionNameChanging(value);
					this.SendPropertyChanging();
					this._PositionName = value;
					this.SendPropertyChanged("PositionName");
					this.OnPositionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionLevel", DbType="Int NOT NULL")]
		public int PositionLevel
		{
			get
			{
				return this._PositionLevel;
			}
			set
			{
				if ((this._PositionLevel != value))
				{
					this.OnPositionLevelChanging(value);
					this.SendPropertyChanging();
					this._PositionLevel = value;
					this.SendPropertyChanged("PositionLevel");
					this.OnPositionLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PositionMaster_UserInfo", Storage="_UserInfos", ThisKey="PositionID", OtherKey="PositionID")]
		public EntitySet<UserInfo> UserInfos
		{
			get
			{
				return this._UserInfos;
			}
			set
			{
				this._UserInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserInfos(UserInfo entity)
		{
			this.SendPropertyChanging();
			entity.PositionMaster = this;
		}
		
		private void detach_UserInfos(UserInfo entity)
		{
			this.SendPropertyChanging();
			entity.PositionMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _RoleID;
		
		private string _RoleName;
		
		private string _RoleDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(long value);
    partial void OnRoleIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnRoleDescriptionChanging(string value);
    partial void OnRoleDescriptionChanged();
    #endregion
		
		public Role()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleDescription", DbType="NVarChar(100)")]
		public string RoleDescription
		{
			get
			{
				return this._RoleDescription;
			}
			set
			{
				if ((this._RoleDescription != value))
				{
					this.OnRoleDescriptionChanging(value);
					this.SendPropertyChanging();
					this._RoleDescription = value;
					this.SendPropertyChanged("RoleDescription");
					this.OnRoleDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SessionMaster")]
	public partial class SessionMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _SessionID;
		
		private string _SessionName;
		
		private System.Nullable<int> _SessionLevel;
		
		private System.Nullable<long> _SessionBelongto;
		
		private EntitySet<TableMaster> _TableMasters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionIDChanging(long value);
    partial void OnSessionIDChanged();
    partial void OnSessionNameChanging(string value);
    partial void OnSessionNameChanged();
    partial void OnSessionLevelChanging(System.Nullable<int> value);
    partial void OnSessionLevelChanged();
    partial void OnSessionBelongtoChanging(System.Nullable<long> value);
    partial void OnSessionBelongtoChanged();
    #endregion
		
		public SessionMaster()
		{
			this._TableMasters = new EntitySet<TableMaster>(new Action<TableMaster>(this.attach_TableMasters), new Action<TableMaster>(this.detach_TableMasters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionName", DbType="NVarChar(50)")]
		public string SessionName
		{
			get
			{
				return this._SessionName;
			}
			set
			{
				if ((this._SessionName != value))
				{
					this.OnSessionNameChanging(value);
					this.SendPropertyChanging();
					this._SessionName = value;
					this.SendPropertyChanged("SessionName");
					this.OnSessionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionLevel", DbType="Int")]
		public System.Nullable<int> SessionLevel
		{
			get
			{
				return this._SessionLevel;
			}
			set
			{
				if ((this._SessionLevel != value))
				{
					this.OnSessionLevelChanging(value);
					this.SendPropertyChanging();
					this._SessionLevel = value;
					this.SendPropertyChanged("SessionLevel");
					this.OnSessionLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionBelongto", DbType="BigInt")]
		public System.Nullable<long> SessionBelongto
		{
			get
			{
				return this._SessionBelongto;
			}
			set
			{
				if ((this._SessionBelongto != value))
				{
					this.OnSessionBelongtoChanging(value);
					this.SendPropertyChanging();
					this._SessionBelongto = value;
					this.SendPropertyChanged("SessionBelongto");
					this.OnSessionBelongtoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SessionMaster_TableMaster", Storage="_TableMasters", ThisKey="SessionID", OtherKey="SessionID")]
		public EntitySet<TableMaster> TableMasters
		{
			get
			{
				return this._TableMasters;
			}
			set
			{
				this._TableMasters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TableMasters(TableMaster entity)
		{
			this.SendPropertyChanging();
			entity.SessionMaster = this;
		}
		
		private void detach_TableMasters(TableMaster entity)
		{
			this.SendPropertyChanging();
			entity.SessionMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SessionStructure")]
	public partial class SessionStructure
	{
		
		private long _SessionID;
		
		private long _SessionParent;
		
		private System.Nullable<long> _SessionBelongTo;
		
		public SessionStructure()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionID", DbType="BigInt NOT NULL")]
		public long SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					this._SessionID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionParent", DbType="BigInt NOT NULL")]
		public long SessionParent
		{
			get
			{
				return this._SessionParent;
			}
			set
			{
				if ((this._SessionParent != value))
				{
					this._SessionParent = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionBelongTo", DbType="BigInt")]
		public System.Nullable<long> SessionBelongTo
		{
			get
			{
				return this._SessionBelongTo;
			}
			set
			{
				if ((this._SessionBelongTo != value))
				{
					this._SessionBelongTo = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TableMaster")]
	public partial class TableMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _TableID;
		
		private string _TableName;
		
		private long _SessionID;
		
		private EntitySet<OrderMaster> _OrderMasters;
		
		private EntityRef<SessionMaster> _SessionMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTableIDChanging(long value);
    partial void OnTableIDChanged();
    partial void OnTableNameChanging(string value);
    partial void OnTableNameChanged();
    partial void OnSessionIDChanging(long value);
    partial void OnSessionIDChanged();
    #endregion
		
		public TableMaster()
		{
			this._OrderMasters = new EntitySet<OrderMaster>(new Action<OrderMaster>(this.attach_OrderMasters), new Action<OrderMaster>(this.detach_OrderMasters));
			this._SessionMaster = default(EntityRef<SessionMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long TableID
		{
			get
			{
				return this._TableID;
			}
			set
			{
				if ((this._TableID != value))
				{
					this.OnTableIDChanging(value);
					this.SendPropertyChanging();
					this._TableID = value;
					this.SendPropertyChanged("TableID");
					this.OnTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this.OnTableNameChanging(value);
					this.SendPropertyChanging();
					this._TableName = value;
					this.SendPropertyChanged("TableName");
					this.OnTableNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionID", DbType="BigInt NOT NULL")]
		public long SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					if (this._SessionMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableMaster_OrderMaster", Storage="_OrderMasters", ThisKey="TableID", OtherKey="TableID")]
		public EntitySet<OrderMaster> OrderMasters
		{
			get
			{
				return this._OrderMasters;
			}
			set
			{
				this._OrderMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SessionMaster_TableMaster", Storage="_SessionMaster", ThisKey="SessionID", OtherKey="SessionID", IsForeignKey=true)]
		public SessionMaster SessionMaster
		{
			get
			{
				return this._SessionMaster.Entity;
			}
			set
			{
				SessionMaster previousValue = this._SessionMaster.Entity;
				if (((previousValue != value) 
							|| (this._SessionMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SessionMaster.Entity = null;
						previousValue.TableMasters.Remove(this);
					}
					this._SessionMaster.Entity = value;
					if ((value != null))
					{
						value.TableMasters.Add(this);
						this._SessionID = value.SessionID;
					}
					else
					{
						this._SessionID = default(long);
					}
					this.SendPropertyChanged("SessionMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderMasters(OrderMaster entity)
		{
			this.SendPropertyChanging();
			entity.TableMaster = this;
		}
		
		private void detach_OrderMasters(OrderMaster entity)
		{
			this.SendPropertyChanging();
			entity.TableMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserInfo")]
	public partial class UserInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Usercode;
		
		private string _Username;
		
		private bool _Gender;
		
		private System.Nullable<System.DateTime> _DOB;
		
		private string _Address;
		
		private string _Image;
		
		private string _Mobile;
		
		private string _Password;
		
		private System.Nullable<long> _PositionID;
		
		private long _ReportingTo;
		
		private EntitySet<OrderMaster> _OrderMasters;
		
		private EntityRef<PositionMaster> _PositionMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnUsercodeChanging(string value);
    partial void OnUsercodeChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnGenderChanging(bool value);
    partial void OnGenderChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPositionIDChanging(System.Nullable<long> value);
    partial void OnPositionIDChanged();
    partial void OnReportingToChanging(long value);
    partial void OnReportingToChanged();
    #endregion
		
		public UserInfo()
		{
			this._OrderMasters = new EntitySet<OrderMaster>(new Action<OrderMaster>(this.attach_OrderMasters), new Action<OrderMaster>(this.detach_OrderMasters));
			this._PositionMaster = default(EntityRef<PositionMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Usercode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Usercode
		{
			get
			{
				return this._Usercode;
			}
			set
			{
				if ((this._Usercode != value))
				{
					this.OnUsercodeChanging(value);
					this.SendPropertyChanging();
					this._Usercode = value;
					this.SendPropertyChanged("Usercode");
					this.OnUsercodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit NOT NULL")]
		public bool Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="DateTime")]
		public System.Nullable<System.DateTime> DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(100)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionID", DbType="BigInt")]
		public System.Nullable<long> PositionID
		{
			get
			{
				return this._PositionID;
			}
			set
			{
				if ((this._PositionID != value))
				{
					if (this._PositionMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionIDChanging(value);
					this.SendPropertyChanging();
					this._PositionID = value;
					this.SendPropertyChanged("PositionID");
					this.OnPositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportingTo", DbType="BigInt NOT NULL")]
		public long ReportingTo
		{
			get
			{
				return this._ReportingTo;
			}
			set
			{
				if ((this._ReportingTo != value))
				{
					this.OnReportingToChanging(value);
					this.SendPropertyChanging();
					this._ReportingTo = value;
					this.SendPropertyChanged("ReportingTo");
					this.OnReportingToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserInfo_OrderMaster", Storage="_OrderMasters", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<OrderMaster> OrderMasters
		{
			get
			{
				return this._OrderMasters;
			}
			set
			{
				this._OrderMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PositionMaster_UserInfo", Storage="_PositionMaster", ThisKey="PositionID", OtherKey="PositionID", IsForeignKey=true)]
		public PositionMaster PositionMaster
		{
			get
			{
				return this._PositionMaster.Entity;
			}
			set
			{
				PositionMaster previousValue = this._PositionMaster.Entity;
				if (((previousValue != value) 
							|| (this._PositionMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PositionMaster.Entity = null;
						previousValue.UserInfos.Remove(this);
					}
					this._PositionMaster.Entity = value;
					if ((value != null))
					{
						value.UserInfos.Add(this);
						this._PositionID = value.PositionID;
					}
					else
					{
						this._PositionID = default(Nullable<long>);
					}
					this.SendPropertyChanged("PositionMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderMasters(OrderMaster entity)
		{
			this.SendPropertyChanging();
			entity.UserInfo = this;
		}
		
		private void detach_OrderMasters(OrderMaster entity)
		{
			this.SendPropertyChanging();
			entity.UserInfo = null;
		}
	}
}
#pragma warning restore 1591
